---

- name: Install nginx
  apt: name=nginx

- name: Install PHP
  apt: name={{item}}
  with_items: [ php5, php5-fpm ]

- name: Configure nginx
  template:
    src: default-site.j2
    dest: /etc/nginx/sites-available/{{item.domain}}
  with_items: "{{nginx_sites}}"
  notify: Restart nginx

- name: Delete nginx default site
  file:
    state: absent
    path: /etc/nginx/sites-enabled/default
  notify: Restart nginx

- name: Enable site
  file:
    src: /etc/nginx/sites-available/{{item.domain}}
    dest: /etc/nginx/sites-enabled/{{item.domain}}
    state: link
  with_items: "{{nginx_sites}}"
  notify: Restart nginx

- name: Create keys directory
  file:
    path: /etc/nginx/keys
    state: directory
    mode: 0700

- name: Save account key path
  stat:
    path: /etc/nginx/keys/account.key
  register: account_key

- name: Generate private TLS account key
  command: openssl genrsa -out /etc/nginx/keys/account.key 4096
  when: "{{ ( item.tls | default(false) ) and not account_key.stat.exists }}"
  with_items: "{{nginx_sites}}"

- name: Generate private TLS domain keys
  command: openssl genrsa -out /etc/nginx/keys/{{item.domain}}.key 4096
  when: "{{ item.tls | default(false) }}"
  with_items: "{{nginx_sites}}"

- name: Generate CSR
  command: openssl req -new -sha512 -key /etc/nginx/keys/{{item.domain}}.key -out /etc/nginx/keys/{{item.domain}}.csr -subj "/C={{item.cert_country}}/L={{item.cert_location}}/O={{item.cert_organisation}}/CN={{item.domain}}"
  when: "{{ item.tls | default(false) }}"
  with_items: "{{nginx_sites}}"

#- name: Debug
#  debug:
#    msg: "{% if true | default(false) %}https://acme-staging.api.letsencrypt.org/directory{% else %}https://acme-v01.api.letsencrypt.org/directory{% endif %}"

- name: Lets encrypt 0
  letsencrypt:
    account_key: /etc/nginx/keys/account.key
    csr: /etc/nginx/keys/{{item.domain}}.csr
    dest: /etc/nginx/keys/{{item.domain}}.crt
    acme_directory: "{% if item.tls_debug | default(false) %}https://acme-staging.api.letsencrypt.org/directory{% else %}https://acme-v01.api.letsencrypt.org/directory{% endif %}"
  when: "{{ item.tls | default(false) }}"
  with_items: "{{ nginx_sites }}"
  register: le_challenge

- name: Prepare http challenge
  file:
    path: "{{item.root}}/.well-known/acme-challenge"
    state: directory
    mode: 0755
  when: "{{ item.tls | default(false) }}"
  with_items: "{{nginx_sites}}"

- name: Solve letsencrypt challenge
  copy:
    dest: "{{ item['item']['root'] }}/{{ item['challenge_data'][ item['item']['domain'] ]['http-01']['resource'] }}"
    content: "{{ item['challenge_data'][ item['item']['domain'] ]['http-01']['resource_value'] }}"
  when: "{{ ( item['item']['tls'] | default(false) ) and le_challenge|changed }}"
  with_items: "{{ le_challenge['results'] }}"

- name: Lets encrypt 1
  letsencrypt:
    account_key: "/etc/nginx/keys/account.key"
    csr: "/etc/nginx/keys/{{ item['item']['domain'] }}.csr"
    dest: "/etc/nginx/keys/{{ item['item']['domain'] }}.crt"
    data: "{{ item }}"
    acme_directory: "{% if item['item']['tls_debug'] | default(false) %}https://acme-staging.api.letsencrypt.org/directory{% else %}https://acme-v01.api.letsencrypt.org/directory{% endif %}"
  when: "{{ item['item']['tls'] | default(false) }}"
  with_items: "{{ le_challenge['results'] }}"
  notify: Restart nginx
