# Send respondd request to update information
[respondd]
enable           = true
# Delay startup until a multiple of the period since zero time
synchronize      = "1m"
# how oftern request per multicast
collect_interval = "1m"
# on which interface
interfaces       = ["{{ yanic_interfaces | join('", "') }}"]
# list of sites to save stats for (empty for global only)
sites            = []
# define a port to listen
# if not set or set to 0 the kernel will use a random free port at its own
port             = {{ yanic_port }}

# A little build-in webserver, which statically serves a directory.
# This is useful for testing purposes or for a little standalone installation.
[webserver]
enable  = false
bind    = "127.0.0.1:8080"
webroot = "/var/www/html/meshviewer"

{% if yanic_nodes_enabled %}
[nodes]
# Cache file
# a json file to cache all data collected directly from respondd
state_path    = "{{ yanic_state_path }}"
# prune data in RAM, cache-file and output json files (i.e. nodes.json)
# that were inactive for longer than
prune_after   = "30d"
# Export nodes and graph periodically
save_interval = "5s"
# Set node to offline if not seen within this period
offline_after = "10m"

# definition for nodes.json
[[nodes.output.meshviewer]]
enable        = true
# structur of nodes.json, which to support
# version 1 is to support legacy meshviewer (which are in master branch)
#    i.e. https://github.com/ffnord/meshviewer/tree/master
# version 2 is to support new version of meshviewer (which are in legacy develop branch or newer)
#    i.e. https://github.com/ffnord/meshviewer/tree/dev
#         https://github.com/ffrgb/meshviewer/tree/develop
version    = {{ yanic_nodes_version }}
# path where to store nodes.json
nodes_path = "{{ yanic_nodes_path }}/nodes.json"
# path where to store graph.json
graph_path = "{{ yanic_nodes_path }}/graph.json"

[nodes.output.meshviewer.filter]
# WARNING: if it is not set, it will publish contact information of other persons
no_owner = false

# definition for the new more compressed meshviewer.json
[[nodes.output.meshviewer-ffrgb]]
enable   = true
path = "{{ yanic_nodes_path }}/meshviewer.json"

[nodes.output.meshviewer-ffrgb.filter]
# WARNING: if it is not set, it will publish contact information of other persons
no_owner = false
{% endif %}

{% if yanic_influxdb_enabled %}
[database]
# this will send delete commands to the database to prune data
# which is older than:
delete_after    = "30d"
#   how often run the cleaning
delete_interval = "1h"

# Save collected data to InfluxDB.
# There are the following measurments:
#   node: store node specific data i.e. clients memory, airtime
#   global: store global data, i.e. count of clients and nodes
#   firmware: store the count of nodes tagged with firmware
#   model: store the count of nodes tagged with hardware model
[[database.connection.influxdb]]
enable   = true
address  = "{{ yanic_influx_hostname }}"
database = "{{ yanic_influx_database }}"
username = "yanic_{{ ansible_hostname }}"
password = "{{ yanic_influx_password.stdout }}"

# Tagging of the data (optional)
[database.connection.influxdb.tags]
# Tags used by Yanic would override the tags from this config
# nodeid, hostname, owner, model, firmware_base, firmware_release,frequency11g and frequency11a are tags which are already used
#tagname1 = "tagvalue 1"
# some useful e.g.:
#system   = "productive"
#site     = "ffhb"

# Logging
[[database.connection.logging]]
enable   = false
path     = "/var/log/yanic.log"
{% endif %}
