# Send respondd request to update information
[respondd]
enable           = true
# how oftern request per multicast
collect_interval = "1m"
# on which interface
interface        = "{{ yanic_interface }}"
port             = {{ yanic_port }}

{% if yanic_nodes_enabled %}
[nodes]
enable         = true
# structur of nodes.json, which to support
# version 1 is to support legacy meshviewer (which are in master branch)
#    i.e. https://github.com/ffnord/meshviewer/tree/master
# version 2 is to support new version of meshviewer (which are in legacy develop branch or newer)
#    i.e. https://github.com/ffnord/meshviewer/tree/dev
#         https://github.com/ffrgb/meshviewer/tree/develop
nodes_version  = {{ yanic_nodes_version }}
# path where to store nodes.json
nodes_path     = "{{ yanic_nodes_path }}/nodes.json"
# path where to store graph.json
graph_path     = "{{ yanic_nodes_path }}/graph.json"

# state-version of nodes.json to store cached data,
#  these is the directly collected respondd data
state_path     = "{{ yanic_state_path }}"

# Export nodes and graph periodically
save_interval = "5s"

# Set node to offline if not seen within this period
offline_after = "10m"

# Prune offline nodes after a time of inactivity
prune_after = "30d"

{% endif %}
{% if yanic_influxdb_enabled %}
# Save collected data to InfluxDB
# there would be the following measurments:
#  node: store node spezific data i.e. clients memory, airtime
#  global: store global data, i.e. count of clients and nodes
#  firmware: store count of nodes tagged with firmware
#  model: store count of nodes tagged with hardware model
[influxdb]
enable   = true
address  = "{{ yanic_influx_hostname }}"
database = "{{ yanic_influx_database }}"
username = "yanic_{{ ansible_hostname }}"
password = "{{ yanic_influx_password.stdout }}"
# cleaning data of measurement node,
#   which are older than 7d
delete_after = "7d"
#   how often run the cleaning
delete_interval = "1h"
{% endif %}
